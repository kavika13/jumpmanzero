
include Constants
include Level25Resources
include RefShark

define WTOP 114

dim iInit

dim iSwim[30]

dim iFrame
dim iCount
dim iAngle
dim iInPool

dim SBits[20]
dim SBX[20]
dim SBY[20]

dim iSBX
dim iSBY
dim sBitTime

dim iSplashScaleX
dim iSplashScaleY

dim iShark
dim iSC

dim iDeathSpin

Sub Main()
  if iInit=0
    iInit=1

    iShark=Spawn(#ScriptShark)
    SetData(iShark,#SharkStartX,80)
    SetData(iShark,#SharkStartY,80)

    iSC=Spawn(#ScriptSwimColl)
    SetData(iSC,#SwimCollSharkObj,iShark)
    SetData(iSC,#SwimCollFacing,0)

    iSwim[1]=NewMesh(#MeshGroove1)
    PrioritizeObject()
    iSwim[2]=NewMesh(#MeshGroove2)
    PrioritizeObject()
    iSwim[3]=NewMesh(#MeshGroove3)
    PrioritizeObject()

    iSwim[11]=NewMesh(#MeshSwimL1)
    PrioritizeObject()
    iSwim[12]=NewMesh(#MeshSwimL2)
    PrioritizeObject()
    iSwim[13]=NewMesh(#MeshSwimL3)
    PrioritizeObject()
    iSwim[14]=NewMesh(#MeshSwimL4)
    PrioritizeObject()

    iSwim[21]=NewMesh(#MeshSwimR1)
    PrioritizeObject()
    iSwim[22]=NewMesh(#MeshSwimR2)
    PrioritizeObject()
    iSwim[23]=NewMesh(#MeshSwimR3)
    PrioritizeObject()
    iSwim[24]=NewMesh(#MeshSwimR4)
    PrioritizeObject()

    InitSbits()

    iFrame=1

    iInPool=0
  end if

  SetExt(#Freeze,0)
  SetExt(#pvisible,1)

  iCount=iCount+1

  SelectPicture(1)
  ScrollTexture(.025,.025)
  SelectPicture(6)
  ScrollTexture(.04,.04)

  SelectObjectMesh(iSwim[iFrame])
  SetProperties(0,0)

  if sBitTime>0
    MoveSBits()
  end if

  if InTank()

    SetData(iSC,#SwimCollInTank,1)

    if getext(#pstat)=#JSDYING
      iDeathSpin=iDeathSpin+1
      iFrame=Cycle(iCount,22,1,3)
      iAngle=iDeathSpin*12
      iInPool=100
    else
      iDeathSpin=0
      Swim()
    end if

    if iInPool=0
      StartSBits(getext(#px),getext(#py))
    end if

    iInPool=iInPool+1
    if iInPool>15
      if CheckJump()
        return 0
      end if
    end if

    SetExt(#Freeze,2)
    SetExt(#pVisible,0)

    dim iPX
    dim iPY
    dim iDrawY
    dim iDrawX

    iPX=getext(#px)
    iPY=getext(#py)

    if iFrame<10
      iDrawX=iPX+Sin(iCount*6,2)
      iDrawY=iPY+Sin(iCount*4,2)
    else
      iDrawX=iPX+Sin(iCount*6,2)
      iDrawY=iPY+Sin(iCount*4,2)
    end if

    SelectObjectMesh(iSwim[iFrame])
    Identity()
    RotateZ(iAngle)
    Translate(iDrawX,iDrawY+5,2)
    SetProperties(#TextureJumpman,1)

    if getext(#pstat)=#JSDYING
      SetExt(#Freeze,0)
    end if
  else
    if getext(#pstat)=4096
      SetExt(#pstat,#JSFALLING)
    end if

    iInPool=0
    SetData(iSC,#SwimCollInTank,0)
  end if

end Sub

sub MoveSBits()
  dim iLoop
  dim iDX
  dim iDY
  dim iDrag
  dim iVis
  dim iScale

  iLoop=1
  while iLoop<21

    if iLoop & 1
      iScale=iSplashScaleY*.95
    else
      iScale=iSplashScaleY
    end if

    iDX=cos((iLoop*5)+35,40)*sBitTime*iSplashScaleX
    iDX=iDX+iLoop-5.5

    iDY=sin((iLoop*5)+35,40)*sBitTime*iScale
    iDrag=sBitTime/2
    iDrag=iDrag*iDrag
    iDY=iDY-iDrag

    if iDY<-1
      SelectObjectMesh(SBits[iLoop])
      SetProperties(0,0)
    else
      iVis=1
      SelectObjectMesh(SBits[iLoop])
      Identity()
      if iLoop & 1
        Scale(3,2,1)
      else
        Scale(5,3,1)
      end if
      Translate(iSBX+iDX/200,iSBY+iDY/200,-1)
      SetProperties(#TextureSBit,1)
    end if

    iLoop=iLoop+1
  loop

  sBitTime=sBitTime+4.6

  if iVis=0
    sBitTime=0
  end if

end sub

sub StartSBits(iX,iY)
  dim iLoop
  sBitTime=17
  iSBX=iX
  iSBY=iY+7

  iSplashScaleX=1.4
  iSplashScaleY=1.4

  if getext(#pStat)=#JSROLL
    iSplashScaleX=.5
    iSplashScaleY=1.1
  end if
  if getext(#pStat)=#JSJUMPING
    iSplashScaleX=1
    iSplashScaleY=1.2
  end if
end sub

sub InitSBits()
  dim iLoop

  iLoop=1
  while iLoop<21
    sBits[iLoop]=newMesh(#MeshSquare)
    iLoop=iLoop+1
  loop

  sBitTime=0

end sub

sub CheckJump()
  if getext(#InputJump) && getext(#py)>#WTOP-2
    setext(#PY,#WTOP+1)
    setext(#pStat,#JSJUMPING)
    if getext(#InputLeft)
      setext(#pDir,#DIR_LEFT)
    elseif getext(#InputRight)
      setext(#pDir,#DIR_RIGHT)
    else
      setext(#pDir,#DIR_UP)
    end if
    setext(#pSC,2)
    setext(#pAct,0)
    return 1
  end if
  return 0
end sub

sub InTank()
  dim iPX
  dim iPY

  iPX=getext(#px)
  iPY=getext(#py)

  if iPY>11 && iPX>16
    if iPY<#WTOP && iPX<135
      return 1
    end if
  end if

  return 0
end sub

sub Swim()
  dim iUp
  dim iDown
  dim iLeft
  dim iRight
  dim iMX
  dim iMY
  dim iSpeed

  iSpeed=.7

  if getext(#InputLeft)=1 && getext(#inputRight)=0
    iLeft=1
    iMX=iSpeed*-1
  end if
  if getext(#InputRight)=1 && getext(#inputLeft)=0
    iRight=1
    iMX=iSpeed
  end if
  if getext(#InputUp)=1 && getext(#inputDown)=0
    iUp=1
    iMY=iSpeed
  end if
  if getext(#InputDown)=1 && getext(#inputUp)=0
    iDown=1
    iMY=iSpeed*-1
  end if

  if getext(#InputJump)=1 && iUp=0 && iDown=0 && (iLeft!=iRight)
    if iInPool<2
      iDown=1
      iMY=iSpeed*-.5
    elseif iInPool>9
      iUp=1
      iMY=iSpeed*.5
    end if
  end if

  if iMX!=0 && iMY!=0
    iMX=iMX/1.4
    iMY=iMY/1.4
  end if

  dim iOldPX
  dim iOldPY
  iOldPX=getext(#PX)
  iOldPY=getext(#PY)

  setext(#PX,iOldPX+iMX)
  if InTank()=0
    setext(#PX,iOldPX)
  end if

  setext(#PY,iOldPY+iMY)
  if InTank()=0
    setext(#PY,iOldPY)
  end if

  iSpeed=30

  if iUp && iLeft
    iFrame=Cycle(iCount,iSpeed,11,14)
    iAngle=-45
  elseif iUp && iRight
    iFrame=Cycle(iCount,iSpeed,21,24)
    iAngle=45
  elseif iDown && iLeft
    iFrame=Cycle(iCount,iSpeed,11,14)
    iAngle=45
  elseif iDown && iRight
    iFrame=Cycle(iCount,iSpeed,21,24)
    iAngle=-45
  elseif iUp
    iFrame=Cycle(iCount,iSpeed,11,14)
    iAngle=-90
  elseif iDown
    iFrame=Cycle(iCount,iSpeed,21,24)
    iAngle=-90
  elseif iLeft
    iFrame=Cycle(iCount,iSpeed,11,14)
    iAngle=0
  elseif iRight
    iFrame=Cycle(iCount,iSpeed,21,24)
    iAngle=0
  else
    iFrame=Cycle(iCount,22,1,3)
    iAngle=sin(iCount*5,5)
  end if

  if iFrame>9
    iAngle=iAngle+sin(iCount*5,2)
  end if
end sub

sub Cycle(iCCount,iSpeed,iMin,iMax)
  dim iCycle
  dim iCP
  dim iPlace
  dim iNeg

  if iCCount<0
    iNeg=1
    iCCount=0-iCCount
  end if

  iCycle=(iMax-iMin)
  iCP=(iCCount * iSpeed) & 1023
  iPlace=((iCP/128)*iCycle)/4

  if iNeg
    iPlace=iPlace+iCycle
    if iPlace>iCycle*2
      iPlace=iPlace-iCycle*2
    end if
  end if

  if iPlace>iCycle
    iPlace=iCycle*2-iPlace
    iPlace=iPlace+1
  end if
  iPlace=iPlace+iMin

  if iPlace>iMax
    iPlace=iMax
  end if

  return iPlace
end sub

sub reset()
  setext(#px,130)
  setext(#py,127)
  setext(#pz,3)
  setext(#pstat,#jsNORMAL)
end sub
